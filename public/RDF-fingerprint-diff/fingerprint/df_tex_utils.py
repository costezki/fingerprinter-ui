# file:     df_tex_utils
# created:  13/10/16
# author:   Eugeniu Costetchi

from pylatex import Package
from pylatex.base_classes import Environment
import re


class LandscapeEnvironment(Environment):
    """
    A class defining landscape environment in case needed to turn the page
    """
    _latex_name = 'landscape'
    packages = [Package('pdflscape')]


def transform_into_tabularx(longtable_tex_src):
    """
    :param longtable_tex_src: tex generated by
    :param tabularxColFormat:
    :return:
    """
    temp = longtable_tex_src.replace(u"\t", u"\\t").replace(u"\b", u"\\b")
    temp = temp.replace(u"\\begin{longtable}", u"\\begin{tabularx}{\\textwidth}")
    temp = temp.replace(u"\\end{longtable}", u"\\end{tabularx}")
    return temp


def pd_df_to_latex(df, tabularxColFormat=None):
    """
    :param tabularxColFormat:
    :param df: pandas dataframe
    :return:
    """
    return transform_into_tabularx(df.to_latex(longtable=True, index=False, float_format="%.2f"))


def url_local_split(url_string):
    """
    splits an url into base and local strings where the local is the lat segment after a # or /
    :param url_string:
    :return: a tuple of base and local string, if the delimiter char is not found returns (None,url_string) meaning
    that the whole string is a local segment
    """
    l = [i.start() for i in re.finditer("[/#]", url_string)]
    if l:
        return url_string[:l[-1]+1], url_string[l[-1] + 1:]
    return "", url_string


if __name__ == "__main__":
    print(url_local_split("http"))
